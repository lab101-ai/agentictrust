"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Save } from "lucide-react";
import { PolicyAPI, ScopeAPI, type Scope, type Policy } from "@/lib/api";
import { PolicyDetailsCard } from "./policy-details-card";
import { PolicyConditionsCard } from "./policy-conditions-card";

interface PolicyFormProps {
  id?: string;
  initialPolicy?: Policy;
  isNew?: boolean;
}

const DEFAULT_POLICY: Policy = {
  policy_id: "", // This will be generated by the API but we need it for the type
  name: "",
  description: "",
  effect: "allow",
  conditions: {},
  priority: 50,
  is_active: true,
  scope_id: "none"
};

export function PolicyForm({ id, initialPolicy, isNew = false }: PolicyFormProps) {
  const [policy, setPolicy] = useState<Policy>(initialPolicy || DEFAULT_POLICY);
  const [scopes, setScopes] = useState<Scope[]>([]);
  const [conditionsString, setConditionsString] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(!initialPolicy);
  const [conditionsError, setConditionsError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const loadData = async () => {
      try {
        setIsLoading(true);
        
        // Always load scopes
        const scopesData = await ScopeAPI.getAll();
        setScopes(scopesData);

        // If editing and no initial policy provided, load the policy
        if (!isNew && !initialPolicy && id) {
          const policyData = await PolicyAPI.get(id);
          setPolicy(policyData);
          setConditionsString(JSON.stringify(policyData.conditions, null, 2));
        } else if (initialPolicy) {
          // If initial policy is provided, use it
          setConditionsString(JSON.stringify(initialPolicy.conditions, null, 2));
        } else {
          // For new policies, initialize with empty conditions
          setConditionsString(JSON.stringify(DEFAULT_POLICY.conditions, null, 2));
        }
      } catch (error) {
        toast.error(`Failed to load data: ${(error as Error).message}`);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, [id, initialPolicy, isNew]);

  const handlePolicyChange = (key: string, value: any) => {
    setPolicy(prev => ({ ...prev, [key]: value }));
  };

  const handleConditionsChange = (value: string, parsed: any) => {
    setConditionsString(value);
    if (parsed === null) {
      setConditionsError("Invalid JSON format");
    } else {
      setPolicy(prev => ({ ...prev, conditions: parsed }));
      setConditionsError(null);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (conditionsError) {
      toast.error("Please fix the conditions JSON format before saving");
      return;
    }

    try {
      setIsSaving(true);
      const policyData = {
        name: policy.name,
        description: policy.description,
        effect: policy.effect as 'allow' | 'deny',
        conditions: JSON.parse(conditionsString),
        priority: policy.priority,
        is_active: policy.is_active,
        scope_id: policy.scope_id === 'none' ? undefined : policy.scope_id,
      };
      
      if (isNew) {
        await PolicyAPI.create(policyData);
        toast.success("Policy created successfully!");
      } else if (id) {
        await PolicyAPI.update(id, policyData);
        toast.success("Policy updated successfully!");
      }
      
      router.push("/dashboard?tab=policies");
    } catch (error) {
      toast.error(`Failed to save policy: ${(error as Error).message}`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="container py-6">
      <div className="flex items-center mb-6">
        <Button variant="ghost" onClick={() => router.back()} className="mr-4">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back
        </Button>
        <h1 className="text-3xl font-semibold">{isNew ? "Create Policy" : "Edit Policy"}</h1>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid gap-6 grid-cols-1 md:grid-cols-2">
          <PolicyDetailsCard 
            policy={policy} 
            scopes={scopes} 
            onPolicyChange={handlePolicyChange} 
          />
          
          <PolicyConditionsCard 
            conditionsString={conditionsString}
            conditionsError={conditionsError}
            onConditionsChange={handleConditionsChange}
          />
        </div>
        <div className="mt-6 flex justify-end">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            className="mr-2"
          >
            Cancel
          </Button>
          <Button 
            type="submit" 
            disabled={isSaving || !!conditionsError}
          >
            {isSaving ? (
              <>
                <div className="h-4 w-4 mr-2 animate-spin rounded-full border-2 border-current border-t-transparent" />
                {isNew ? 'Creating' : 'Saving'}
              </>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                {isNew ? 'Create Policy' : 'Save Policy'}
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}
