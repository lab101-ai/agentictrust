"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Save } from "lucide-react";
import { ScopeAPI, type Scope, type ScopeRegistration } from "@/lib/api";
import { ScopeDetailsCard } from "./scope-details-card";

interface ScopeFormProps {
  id?: string;
  initialScope?: Scope;
  isNew?: boolean;
}

const DEFAULT_SCOPE: Scope = {
  scope_id: "", // This will be generated by the API
  name: "",
  description: "",
  category: "read",
  is_sensitive: false,
  requires_approval: false,
  is_default: false,
  is_active: true
};

const DEFAULT_SCOPE_CATEGORIES = ["read", "write", "admin", "tool"];

export function ScopeForm({ id, initialScope, isNew = false }: ScopeFormProps) {
  const [scope, setScope] = useState<Scope>(initialScope || DEFAULT_SCOPE);
  const [scopeCategories, setScopeCategories] = useState<string[]>(DEFAULT_SCOPE_CATEGORIES);
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(!initialScope);
  const router = useRouter();

  useEffect(() => {
    const loadData = async () => {
      try {
        setIsLoading(true);
        
        // Load categories if needed
        // const categories = await ScopeAPI.getCategories();
        // setScopeCategories(categories);

        // If editing and no initial scope provided, load the scope
        if (!isNew && !initialScope && id) {
          const scopeData = await ScopeAPI.get(id);
          setScope(scopeData);
        }
      } catch (error) {
        toast.error(`Failed to load data: ${(error as Error).message}`);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, [id, initialScope, isNew]);

  const handleScopeChange = (key: string, value: any) => {
    setScope(prev => ({ ...prev, [key]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setIsSaving(true);
      
      // Validate required fields
      if (!scope.name || !scope.description) {
        toast.error("Name and description are required");
        return;
      }

      // Prepare the data
      const scopeData: ScopeRegistration = {
        name: scope.name,
        description: scope.description,
        category: scope.category,
        is_sensitive: scope.is_sensitive,
        requires_approval: scope.requires_approval,
        is_default: scope.is_default,
        is_active: scope.is_active
      };

      // Create or update
      if (isNew) {
        const newScope = await ScopeAPI.create(scopeData);
        toast.success("Scope created successfully");
        router.push("/dashboard?tab=scopes");
      } else {
        if (!id) throw new Error("Scope ID is required for updates");
        await ScopeAPI.update(id, scopeData);
        toast.success("Scope updated successfully");
        router.push("/dashboard?tab=scopes");
      }
    } catch (error) {
      toast.error(`Failed to save scope: ${(error as Error).message}`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="container py-6">
      <div className="flex items-center mb-6">
        <Button variant="ghost" onClick={() => router.back()} className="mr-4">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back
        </Button>
        <h1 className="text-3xl font-semibold">{isNew ? "Create Scope" : "Edit Scope"}</h1>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid gap-6 grid-cols-1">
          <ScopeDetailsCard
            scope={scope}
            scopeCategories={scopeCategories}
            isLoading={isLoading}
            onChange={handleScopeChange}
          />
        </div>
        <div className="mt-6 flex justify-end">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            className="mr-2"
          >
            Cancel
          </Button>
          <Button 
            type="submit" 
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <div className="h-4 w-4 mr-2 animate-spin rounded-full border-2 border-current border-t-transparent" />
                {isNew ? 'Creating' : 'Saving'}
              </>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                {isNew ? 'Create Scope' : 'Save Scope'}
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}
